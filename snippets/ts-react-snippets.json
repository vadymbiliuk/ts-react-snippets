{
  "Import React": {
    "prefix": "imr",
    "body": ["import React from 'react';"],
    "description": "Imports React"
  },
  "Import React Native": {
    "prefix": "imrn",
    "body": ["import { ${1: ModuleName} } from 'react-native';"],
    "description": "Imports React Native"
  },
  "Import PropTypes": {
    "prefix": "impt",
    "body": ["import PropTypes from 'prop-types';"],
    "description": "Imports PropTypes"
  },
  "Create Redux Container structure": {
    "prefix": "condux",
    "body": [
      "import { connect } from 'react-redux';",
      "import { ${1:ViewName} } from '${2:ViewPath}';",
      "\t",
      "const mapStateToProps = state => ({",
      "\t",
      "});",
      "\t",
      "const mapDispatchToProps = {",
      "\t",
      "};",
      "\t",
      "export default connect(",
      "\tmapStateToProps,",
      "\tmapDispatchToProps",
      ")(${1:ViewName});",
      "\t"
    ],
    "description": "Create Redux Container structure"
  },
  "Create TypeScript interface": {
    "prefix": "int",
    "body": ["export interface I${1:InterfaceName} {", "\t", "}"],
    "description": "Creates TypeScript interface"
  },
  "Create TypeScript type": {
    "prefix": "tp",
    "body": ["export type ${1:TypeName} = ${2:type}"],
    "description": "Creates TypeScript type"
  },
  "Create function": {
    "prefix": "func",
    "body": [
      "export function ${1:funcName}(): ${2:funcReturnType} {",
      "\t",
      "}"
    ],
    "description": "Creates TypeScript function"
  },
  "Create arrow function": {
    "prefix": "afunc",
    "body": [
      "export const ${1:funcName} = (): ${2:funcReturnType} => {",
      "\t",
      "}"
    ],
    "description": "Creates TypeScript arrow function"
  },
  "Create class": {
    "prefix": "cls",
    "body": [
      "export class ${1:className} {",
      "\t// Fields:",
      "\tprivate readonly _${2:fieldName}: ${3:fieldType};",
      "\t",
      "\t// Properties:",
      "\tpublic ${2:propertyName}: ${3:propertyType} = ${4:propertyValue};",
      "\t",
      "\tconstructor() {",
      "\t\tthis._${2:fieldName} = this.${2:propertyName};",
      "\t}",
      "}"
    ],
    "description": "Creates TypeScript class"
  },
  "Create abstract class": {
    "prefix": "acls",
    "body": [
      "export abstract class ${1:className} {",
      "\t// Properties:",
      "\tpublic ${2:propertyName}: ${3:propertyType} = ${4:propertyValue};",
      "}"
    ],
    "description": "Creates TypeScript abstract class"
  },
  "Create TypeScript private field": {
    "prefix": "cpf",
    "body": ["private readonly _${1:fieldName}: ${2:fieldType};"],
    "description": "Creates TypeScript private readonly field for class"
  },
  "Create TypeScript public property": {
    "prefix": "cpp",
    "body": [
      "public ${1:propertyName}: ${2:propertyType} = ${3:propertyValue};"
    ],
    "description": "Creates TypeScript public property for class"
  },
  "Create React class component": {
    "prefix": "cc",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "export interface I${1:${TM_FILENAME_BASE}}Props {",
      "\t",
      "}",
      "export interface I${1:${TM_FILENAME_BASE}}State {",
      "\t",
      "}",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component<I${1:${TM_FILENAME_BASE}}Props, I${1:${TM_FILENAME_BASE}}State> {",
      "\tstate = {};",
      "\t",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t);",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates React class component with interfaces"
  },
  "Create React Native class component": {
    "prefix": "ncc",
    "body": [
      "import React, { Component } from 'react';",
      "import { View } from 'react-native';",
      "",
      "export interface I${1:${TM_FILENAME_BASE}}Props {",
      "\t",
      "}",
      "export interface I${1:${TM_FILENAME_BASE}}State {",
      "\t",
      "}",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component<I${1:${TM_FILENAME_BASE}}Props, I${1:${TM_FILENAME_BASE}}State> {",
      "\tstate = {};",
      "\t",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t$0",
      "\t\t\t</View>",
      "\t\t);",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates React class component with interfaces"
  },
  "Create React class pure component": {
    "prefix": "cpc",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "export interface I${1:${TM_FILENAME_BASE}}Props {",
      "\t",
      "}",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component<I${1:${TM_FILENAME_BASE}}Props> {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t);",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates React class pure component with interface"
  },
  "Create React Native class pure component": {
    "prefix": "ncpc",
    "body": [
      "import React, { Component } from 'react';",
      "import { View } from 'react-native';",
      "",
      "export interface I${1:${TM_FILENAME_BASE}}Props {",
      "\t",
      "}",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component<I${1:${TM_FILENAME_BASE}}Props> {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t$0",
      "\t\t\t</View>",
      "\t\t);",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates React Native class pure component with interface"
  },
  "Create React functional component": {
    "prefix": "fc",
    "body": [
      "import React from 'react';",
      "",
      "export interface I${1:${TM_FILENAME_BASE}}Props {",
      "\t",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}}: React.FC<I${1:${TM_FILENAME_BASE}}Props> = ({ }) => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t);",
      "}",
      ""
    ],
    "description": "Creates React functional component with interface"
  },
  "Create React Native functional component": {
    "prefix": "nfc",
    "body": [
      "import React from 'react';",
      "import { View } from 'react-native;",
      "",
      "export interface I${1:${TM_FILENAME_BASE}}Props {",
      "\t",
      "}",
      "",
      "export const ${1:${TM_FILENAME_BASE}}: React.FC<I${1:${TM_FILENAME_BASE}}Props> = ({ }) => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t$0",
      "\t\t</View>",
      "\t);",
      "}",
      ""
    ],
    "description": "Creates React Native functional component with interface"
  },
  "Create useState hook": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1:State}] = useState(${2:defaultState});"
    ],
    "description": "Creates React useState hook"
  },
  "Create useEffect hook": {
    "prefix": "useEffect",
    "body": ["useEffect(() => {", "\t", "}, []);"],
    "description": "Creates React useEffect hook"
  },
  "Create useContext hook": {
    "prefix": "useContext",
    "body": ["const ${1:value} = useContext(MyContext);"],
    "description": "Creates React useContext hook"
  },
  "Create useReducer hook": {
    "prefix": "useReducer",
    "body": [
      "const [${1:state}, dispatch] = useReducer(${2:reducer}, initialState);"
    ],
    "description": "Creates React useReducer hook"
  },
  "Create useCallback hook": {
    "prefix": "useCallback",
    "body": [
      "const ${1:memoizedCallback} = useCallback(() => {",
      "\t",
      "}, []);"
    ],
    "description": "Creates React useCallback hook"
  },
  "Create useMemo hook": {
    "prefix": "useMemo",
    "body": ["const ${1:memoizedValue} = useMemo(() => {", "\t", "}, []);"],
    "description": "Creates React useMemo hook"
  },
  "Create useRef hook": {
    "prefix": "useRef",
    "body": ["const ${1:refContainer} = useRef(${2:initialValue});"],
    "description": "Creates React useRef hook"
  },
  "Create useImperativeHandle hook": {
    "prefix": "useImperativeHandle",
    "body": ["useImperativeHandle(${1:initialValue}, () => {", "\t", "}, []);"],
    "description": "Creates React useImperativeHandle hook"
  },
  "Create useLayoutEffect hook": {
    "prefix": "useLayoutEffect",
    "body": ["useLayoutEffect(() => {", "\t", "}, []);"],
    "description": "Creates React useLayoutEffect hook"
  },
  "Create useDebugValue hook": {
    "prefix": "useDebugValue",
    "body": ["useDebugValue(${1:value});"],
    "description": "Creates React useDebugValue hook"
  },
  "Create useSelector hook": {
    "prefix": "useSelector",
    "body": [
      "const ${1:selectedData} = useSelector(state => state.${2:YourObject});"
    ],
    "description": "Creates Redux useSelector hook"
  },
  "Create useDispatch hook": {
    "prefix": "useDispatch",
    "body": ["const dispatch = useDispatch();"],
    "description": "Creates Redux useDispatch hook"
  },
  "Create useStore hook": {
    "prefix": "useStore",
    "body": ["const store = useStore();"],
    "description": "Creates Redux useStore hook"
  }
}
